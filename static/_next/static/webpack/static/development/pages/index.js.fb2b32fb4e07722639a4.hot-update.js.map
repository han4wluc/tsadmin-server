{"version":3,"file":"static/webpack/static/development/pages/index.js.fb2b32fb4e07722639a4.hot-update.js","sources":["webpack:///./containers/ItemsTable/ItemsTable.store.ts"],"sourcesContent":["import { action, observable, computed } from 'mobx';\nimport { message } from 'antd';\nimport { EntityEventEmitter } from '~/services/emitters/entityEmitter';\nimport { BaseStore, IStoreDependencies } from '~/utils/mobxConnect';\nimport EntityService from '~/services/api/EntityService';\nimport ResourceStore from '~/stores/ResourceStore';\nimport ModalStore from '~/stores/ModalStore';\n\nexport type Entity = {\n  id: number;\n  label: string;\n  columns: any;\n};\n\nexport interface IItemsTableDependencies extends IStoreDependencies {\n  entityService: EntityService;\n  entityEmitter: EntityEventEmitter;\n}\n\nenum ModalMode {\n  create = 'create',\n  update = 'update',\n}\n\ntype Page = {\n  num: number;\n  size: number;\n  total: number;\n};\n\nexport class ItemsTableStore extends BaseStore {\n  private entityService: EntityService;\n  private itemsResource: ResourceStore<object>;\n  private modalStore: ModalStore<any>;\n  private entityEmitter: EntityEventEmitter;\n  private currentFilterString?: string;\n  private currentSortString?: string;\n\n  constructor(protected dependencies: IItemsTableDependencies) {\n    super(dependencies);\n    this.entityService = dependencies.entityService;\n    this.entityEmitter = dependencies.entityEmitter;\n    this.itemsResource = new ResourceStore<object>([], (x: any) => x.id);\n    this.modalStore = new ModalStore<any>();\n  }\n\n  mount(): any {\n    const listerner = this.entityEmitter.addOnChooseEntityListerner(entity => {\n      this.selectedEntity = entity;\n      this.fetchData();\n    });\n    return listerner.remove;\n  }\n\n  @observable entitiesLoading: boolean = true;\n  @observable itemsLoading: boolean = true;\n  @observable createItemLoading: boolean = false;\n  @observable selectedEntity: any;\n  @observable page: Page = {\n    num: 1,\n    size: 20,\n    total: 0,\n  };\n  @observable filterString?: string;\n  @observable sortString?: string;\n\n  @computed get pageInfo(): any {\n    const page = this.page;\n    return {\n      current: page.num,\n      pageSize: page.size,\n      total: page.total,\n    };\n  }\n\n  @computed get columns(): any {\n    if (!this.selectedEntity) {\n      return [];\n    }\n    return this.selectedEntity.columns;\n  }\n\n  @computed get currentEditItem(): any {\n    return this.items.filter((i: any) => i.id == this.currentEditItemId)[0];\n  }\n\n  @computed get items(): object[] {\n    return this.itemsResource.items;\n  }\n\n  @computed get currentEditItemId(): any {\n    if (!this.modalStore.payload) {\n      return undefined;\n    }\n    return this.modalStore.payload.itemId;\n  }\n\n  @computed get modalMode(): any {\n    if (!this.modalStore.payload) {\n      return ModalMode.create;\n    }\n    return this.modalStore.payload.mode;\n  }\n\n  @computed get modalVisible(): boolean {\n    return this.modalStore.visible;\n  }\n\n  @computed get modalTitle(): string {\n    return this.modalMode === ModalMode.create ? 'Create' : 'Edit';\n  }\n\n  @action setFilterString = (filterString: string): void => {\n    this.filterString = filterString;\n  };\n\n  @action setSortString = (sortString: string): void => {\n    this.sortString = sortString;\n  };\n\n  doSearch = () => {\n    this.currentFilterString = this.filterString;\n    this.currentSortString = this.sortString;\n    this.fetchData();\n  };\n\n  @action fetchData = async (pageNum: number = 1): Promise<void> => {\n    if (!this.selectedEntity) {\n      return;\n    }\n    this.itemsLoading = true;\n    try {\n      const { items, page } = await this.entityService.fetchItems(\n        this.selectedEntity.label,\n        {\n          params: {\n            pageNum,\n            pageSize: this.page.size,\n            filter: this.currentFilterString,\n            sort: this.currentSortString,\n          },\n        },\n      );\n      this.itemsResource.replace(items);\n      this.page = page;\n    } catch (error) {\n      message.error('network error');\n    }\n    this.itemsLoading = false;\n  };\n\n  @action createItem = async (data: any): Promise<void> => {\n    if (!this.selectedEntity) {\n      return;\n    }\n    this.createItemLoading = true;\n    await this.entityService.createItem(this.selectedEntity.label, data);\n    this.createItemLoading = false;\n    this.hideModal();\n    message.success('Update successful');\n    this.fetchData();\n  };\n\n  @action updateItem = async (data: any): Promise<void> => {\n    if (!this.selectedEntity) {\n      return;\n    }\n    this.createItemLoading = true;\n    const item = await this.entityService.updateItem(\n      this.selectedEntity.label,\n      this.currentEditItemId,\n      data,\n    );\n    this.itemsResource.append(item);\n    message.success('Update successful');\n    this.createItemLoading = false;\n    this.hideModal();\n    return item;\n  };\n\n  @action deleteItem = async (id: any): Promise<void> => {\n    if (!this.selectedEntity) {\n      return;\n    }\n    await this.entityService.deleteItem(this.selectedEntity.label, id);\n    message.success('Item deleted');\n    this.fetchData();\n  };\n\n  showCreateModal = (): void => {\n    this.modalStore.show({\n      mode: ModalMode.create,\n      itemId: undefined,\n    });\n  };\n\n  onSubmitForm = (data: any): void => {\n    if (this.modalMode === ModalMode.create) {\n      this.createItem(data);\n      return;\n    }\n    this.updateItem(data);\n  };\n\n  showUpdateModal = (itemId: string | number): void => {\n    this.modalStore.show({\n      mode: ModalMode.update,\n      itemId: itemId,\n    });\n  };\n\n  hideModal = (): void => {\n    this.modalStore.hide({\n      mode: ModalMode.create,\n      itemId: undefined,\n    });\n  };\n}\n"],"mappings":"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","sourceRoot":""}